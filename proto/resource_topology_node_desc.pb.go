// Code generated by protoc-gen-gogo.
// source: resource_topology_node_desc.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResourceTopologyNodeDescriptor struct {
	ResourceDesc *ResourceDescriptor               `protobuf:"bytes,1,opt,name=resource_desc,json=resourceDesc" json:"resource_desc,omitempty"`
	Children     []*ResourceTopologyNodeDescriptor `protobuf:"bytes,2,rep,name=children" json:"children,omitempty"`
	ParentId     string                            `protobuf:"bytes,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (m *ResourceTopologyNodeDescriptor) Reset()         { *m = ResourceTopologyNodeDescriptor{} }
func (m *ResourceTopologyNodeDescriptor) String() string { return proto1.CompactTextString(m) }
func (*ResourceTopologyNodeDescriptor) ProtoMessage()    {}
func (*ResourceTopologyNodeDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptorResourceTopologyNodeDesc, []int{0}
}

func (m *ResourceTopologyNodeDescriptor) GetResourceDesc() *ResourceDescriptor {
	if m != nil {
		return m.ResourceDesc
	}
	return nil
}

func (m *ResourceTopologyNodeDescriptor) GetChildren() []*ResourceTopologyNodeDescriptor {
	if m != nil {
		return m.Children
	}
	return nil
}

func init() {
	proto1.RegisterType((*ResourceTopologyNodeDescriptor)(nil), "proto.ResourceTopologyNodeDescriptor")
}
func (m *ResourceTopologyNodeDescriptor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResourceTopologyNodeDescriptor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResourceDesc != nil {
		data[i] = 0xa
		i++
		i = encodeVarintResourceTopologyNodeDesc(data, i, uint64(m.ResourceDesc.Size()))
		n1, err := m.ResourceDesc.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Children) > 0 {
		for _, msg := range m.Children {
			data[i] = 0x12
			i++
			i = encodeVarintResourceTopologyNodeDesc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ParentId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintResourceTopologyNodeDesc(data, i, uint64(len(m.ParentId)))
		i += copy(data[i:], m.ParentId)
	}
	return i, nil
}

func encodeFixed64ResourceTopologyNodeDesc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ResourceTopologyNodeDesc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintResourceTopologyNodeDesc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ResourceTopologyNodeDescriptor) Size() (n int) {
	var l int
	_ = l
	if m.ResourceDesc != nil {
		l = m.ResourceDesc.Size()
		n += 1 + l + sovResourceTopologyNodeDesc(uint64(l))
	}
	if len(m.Children) > 0 {
		for _, e := range m.Children {
			l = e.Size()
			n += 1 + l + sovResourceTopologyNodeDesc(uint64(l))
		}
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovResourceTopologyNodeDesc(uint64(l))
	}
	return n
}

func sovResourceTopologyNodeDesc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozResourceTopologyNodeDesc(x uint64) (n int) {
	return sovResourceTopologyNodeDesc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceTopologyNodeDescriptor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceTopologyNodeDesc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceTopologyNodeDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceTopologyNodeDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceDesc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTopologyNodeDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceTopologyNodeDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceDesc == nil {
				m.ResourceDesc = &ResourceDescriptor{}
			}
			if err := m.ResourceDesc.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Children", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTopologyNodeDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResourceTopologyNodeDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Children = append(m.Children, &ResourceTopologyNodeDescriptor{})
			if err := m.Children[len(m.Children)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceTopologyNodeDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResourceTopologyNodeDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResourceTopologyNodeDesc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResourceTopologyNodeDesc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceTopologyNodeDesc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceTopologyNodeDesc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceTopologyNodeDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceTopologyNodeDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthResourceTopologyNodeDesc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowResourceTopologyNodeDesc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipResourceTopologyNodeDesc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthResourceTopologyNodeDesc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceTopologyNodeDesc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorResourceTopologyNodeDesc = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x2c, 0x4a, 0x2d, 0xce,
	0x2f, 0x2d, 0x4a, 0x4e, 0x8d, 0x2f, 0xc9, 0x2f, 0xc8, 0xcf, 0xc9, 0x4f, 0xaf, 0x8c, 0xcf, 0xcb,
	0x4f, 0x49, 0x8d, 0x4f, 0x49, 0x2d, 0x4e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x53, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9,
	0xe9, 0xf9, 0xfa, 0x60, 0xe1, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0xcc, 0x01, 0xb3, 0x20, 0xba, 0xa4,
	0x84, 0xe1, 0x06, 0x23, 0x8c, 0x52, 0x3a, 0xc0, 0xc8, 0x25, 0x17, 0x04, 0x15, 0x0f, 0x81, 0xda,
	0xe7, 0x07, 0xb4, 0xce, 0x05, 0xa8, 0xa4, 0x28, 0xb3, 0xa0, 0x24, 0xbf, 0x48, 0xc8, 0x8e, 0x8b,
	0x17, 0x45, 0xa7, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x24, 0xc4, 0x04, 0x3d, 0x98, 0x6e,
	0x84, 0x8e, 0x20, 0x9e, 0x22, 0x24, 0x31, 0x21, 0x47, 0x2e, 0x8e, 0xe4, 0x8c, 0xcc, 0x9c, 0x94,
	0xa2, 0xd4, 0x3c, 0x09, 0x26, 0x05, 0x66, 0xa0, 0x56, 0x55, 0x34, 0xad, 0xd8, 0x2d, 0x0e, 0x82,
	0x6b, 0x13, 0x92, 0xe6, 0xe2, 0x2c, 0x48, 0x04, 0x32, 0x4a, 0xe2, 0x33, 0x53, 0x24, 0x98, 0x81,
	0xd6, 0x73, 0x06, 0x71, 0x40, 0x04, 0x3c, 0x53, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0x00,
	0xc4, 0x0f, 0x80, 0x78, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0xf1, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8e, 0x74, 0x1b, 0x24, 0x4b, 0x01, 0x00, 0x00,
}
