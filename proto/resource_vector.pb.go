// Code generated by protoc-gen-gogo.
// source: resource_vector.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResourceVector struct {
	CpuCores float32 `protobuf:"fixed32,1,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	RamBw    uint64  `protobuf:"varint,2,opt,name=ram_bw,json=ramBw,proto3" json:"ram_bw,omitempty"`
	RamCap   uint64  `protobuf:"varint,3,opt,name=ram_cap,json=ramCap,proto3" json:"ram_cap,omitempty"`
	DiskBw   uint64  `protobuf:"varint,4,opt,name=disk_bw,json=diskBw,proto3" json:"disk_bw,omitempty"`
	DiskCap  uint64  `protobuf:"varint,5,opt,name=disk_cap,json=diskCap,proto3" json:"disk_cap,omitempty"`
	NetBw    uint64  `protobuf:"varint,6,opt,name=net_bw,json=netBw,proto3" json:"net_bw,omitempty"`
}

func (m *ResourceVector) Reset()                    { *m = ResourceVector{} }
func (m *ResourceVector) String() string            { return proto1.CompactTextString(m) }
func (*ResourceVector) ProtoMessage()               {}
func (*ResourceVector) Descriptor() ([]byte, []int) { return fileDescriptorResourceVector, []int{0} }

func init() {
	proto1.RegisterType((*ResourceVector)(nil), "proto.ResourceVector")
}
func (m *ResourceVector) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ResourceVector) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CpuCores != 0 {
		data[i] = 0xd
		i++
		i = encodeFixed32ResourceVector(data, i, uint32(math.Float32bits(float32(m.CpuCores))))
	}
	if m.RamBw != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintResourceVector(data, i, uint64(m.RamBw))
	}
	if m.RamCap != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintResourceVector(data, i, uint64(m.RamCap))
	}
	if m.DiskBw != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintResourceVector(data, i, uint64(m.DiskBw))
	}
	if m.DiskCap != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintResourceVector(data, i, uint64(m.DiskCap))
	}
	if m.NetBw != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintResourceVector(data, i, uint64(m.NetBw))
	}
	return i, nil
}

func encodeFixed64ResourceVector(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32ResourceVector(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintResourceVector(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ResourceVector) Size() (n int) {
	var l int
	_ = l
	if m.CpuCores != 0 {
		n += 5
	}
	if m.RamBw != 0 {
		n += 1 + sovResourceVector(uint64(m.RamBw))
	}
	if m.RamCap != 0 {
		n += 1 + sovResourceVector(uint64(m.RamCap))
	}
	if m.DiskBw != 0 {
		n += 1 + sovResourceVector(uint64(m.DiskBw))
	}
	if m.DiskCap != 0 {
		n += 1 + sovResourceVector(uint64(m.DiskCap))
	}
	if m.NetBw != 0 {
		n += 1 + sovResourceVector(uint64(m.NetBw))
	}
	return n
}

func sovResourceVector(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozResourceVector(x uint64) (n int) {
	return sovResourceVector(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResourceVector) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResourceVector
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceVector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceVector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCores", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			v = uint32(data[iNdEx-4])
			v |= uint32(data[iNdEx-3]) << 8
			v |= uint32(data[iNdEx-2]) << 16
			v |= uint32(data[iNdEx-1]) << 24
			m.CpuCores = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RamBw", wireType)
			}
			m.RamBw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceVector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RamBw |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RamCap", wireType)
			}
			m.RamCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceVector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RamCap |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskBw", wireType)
			}
			m.DiskBw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceVector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DiskBw |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskCap", wireType)
			}
			m.DiskCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceVector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DiskCap |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetBw", wireType)
			}
			m.NetBw = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResourceVector
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NetBw |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResourceVector(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResourceVector
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResourceVector(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResourceVector
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceVector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResourceVector
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthResourceVector
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowResourceVector
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipResourceVector(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthResourceVector = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResourceVector   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorResourceVector = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4a, 0x2d, 0xce,
	0x2f, 0x2d, 0x4a, 0x4e, 0x8d, 0x2f, 0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0xe1, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0xcc, 0x01,
	0xb3, 0x20, 0xba, 0x94, 0x56, 0x30, 0x72, 0xf1, 0x05, 0x41, 0xcd, 0x0b, 0x03, 0x1b, 0x27, 0x24,
	0xcd, 0xc5, 0x99, 0x5c, 0x50, 0x1a, 0x9f, 0x9c, 0x0f, 0xb4, 0x47, 0x82, 0x51, 0x81, 0x51, 0x83,
	0x29, 0x88, 0x03, 0x28, 0xe0, 0x0c, 0xe2, 0x0b, 0x89, 0x72, 0xb1, 0x15, 0x25, 0xe6, 0xc6, 0x27,
	0x95, 0x4b, 0x30, 0x01, 0x65, 0x58, 0x82, 0x58, 0x81, 0x3c, 0xa7, 0x72, 0x21, 0x71, 0x2e, 0x76,
	0x90, 0x70, 0x72, 0x62, 0x81, 0x04, 0x33, 0x58, 0x1c, 0xa4, 0xca, 0x39, 0xb1, 0x00, 0x24, 0x91,
	0x92, 0x59, 0x9c, 0x0d, 0xd2, 0xc0, 0x02, 0x91, 0x00, 0x71, 0x81, 0x3a, 0x24, 0xb9, 0x38, 0xc0,
	0x12, 0x20, 0x2d, 0xac, 0x60, 0x19, 0xb0, 0x42, 0x90, 0x1e, 0xa0, 0x1d, 0x79, 0xa9, 0x25, 0x20,
	0x2d, 0x6c, 0x10, 0x3b, 0x80, 0x3c, 0xa7, 0x72, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x00,
	0xf1, 0x03, 0x20, 0x9e, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d, 0xec, 0x07, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x80, 0x72, 0xe3, 0x75, 0x12, 0x01, 0x00, 0x00,
}
