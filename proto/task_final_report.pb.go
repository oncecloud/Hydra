// Code generated by protoc-gen-gogo.
// source: task_final_report.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskFinalReport struct {
	TaskId       uint64  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	StartTime    uint64  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime   uint64  `protobuf:"varint,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Instructions uint64  `protobuf:"varint,4,opt,name=instructions,proto3" json:"instructions,omitempty"`
	Cycles       uint64  `protobuf:"varint,5,opt,name=cycles,proto3" json:"cycles,omitempty"`
	LlcRefs      uint64  `protobuf:"varint,6,opt,name=llc_refs,json=llcRefs,proto3" json:"llc_refs,omitempty"`
	LlcMisses    uint64  `protobuf:"varint,7,opt,name=llc_misses,json=llcMisses,proto3" json:"llc_misses,omitempty"`
	Runtime      float64 `protobuf:"fixed64,8,opt,name=runtime,proto3" json:"runtime,omitempty"`
}

func (m *TaskFinalReport) Reset()                    { *m = TaskFinalReport{} }
func (m *TaskFinalReport) String() string            { return proto1.CompactTextString(m) }
func (*TaskFinalReport) ProtoMessage()               {}
func (*TaskFinalReport) Descriptor() ([]byte, []int) { return fileDescriptorTaskFinalReport, []int{0} }

func init() {
	proto1.RegisterType((*TaskFinalReport)(nil), "proto.TaskFinalReport")
}
func (m *TaskFinalReport) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TaskFinalReport) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTaskFinalReport(data, i, uint64(m.TaskId))
	}
	if m.StartTime != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintTaskFinalReport(data, i, uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintTaskFinalReport(data, i, uint64(m.FinishTime))
	}
	if m.Instructions != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintTaskFinalReport(data, i, uint64(m.Instructions))
	}
	if m.Cycles != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintTaskFinalReport(data, i, uint64(m.Cycles))
	}
	if m.LlcRefs != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintTaskFinalReport(data, i, uint64(m.LlcRefs))
	}
	if m.LlcMisses != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintTaskFinalReport(data, i, uint64(m.LlcMisses))
	}
	if m.Runtime != 0 {
		data[i] = 0x41
		i++
		i = encodeFixed64TaskFinalReport(data, i, uint64(math.Float64bits(float64(m.Runtime))))
	}
	return i, nil
}

func encodeFixed64TaskFinalReport(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TaskFinalReport(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTaskFinalReport(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *TaskFinalReport) Size() (n int) {
	var l int
	_ = l
	if m.TaskId != 0 {
		n += 1 + sovTaskFinalReport(uint64(m.TaskId))
	}
	if m.StartTime != 0 {
		n += 1 + sovTaskFinalReport(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovTaskFinalReport(uint64(m.FinishTime))
	}
	if m.Instructions != 0 {
		n += 1 + sovTaskFinalReport(uint64(m.Instructions))
	}
	if m.Cycles != 0 {
		n += 1 + sovTaskFinalReport(uint64(m.Cycles))
	}
	if m.LlcRefs != 0 {
		n += 1 + sovTaskFinalReport(uint64(m.LlcRefs))
	}
	if m.LlcMisses != 0 {
		n += 1 + sovTaskFinalReport(uint64(m.LlcMisses))
	}
	if m.Runtime != 0 {
		n += 9
	}
	return n
}

func sovTaskFinalReport(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTaskFinalReport(x uint64) (n int) {
	return sovTaskFinalReport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskFinalReport) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskFinalReport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskFinalReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskFinalReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TaskId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StartTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FinishTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instructions", wireType)
			}
			m.Instructions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Instructions |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycles", wireType)
			}
			m.Cycles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Cycles |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LlcRefs", wireType)
			}
			m.LlcRefs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LlcRefs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LlcMisses", wireType)
			}
			m.LlcMisses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LlcMisses |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Runtime", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			m.Runtime = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTaskFinalReport(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskFinalReport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaskFinalReport(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaskFinalReport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskFinalReport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTaskFinalReport
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTaskFinalReport
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTaskFinalReport(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTaskFinalReport = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaskFinalReport   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTaskFinalReport = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0x3f, 0x4e, 0xf3, 0x40,
	0x10, 0xc5, 0xbf, 0xfd, 0x48, 0xec, 0x30, 0x20, 0x81, 0xb6, 0x20, 0x0b, 0x12, 0x01, 0xa5, 0xa2,
	0x21, 0x29, 0xb8, 0x01, 0x05, 0x12, 0x05, 0x8d, 0x95, 0xde, 0xb2, 0x37, 0xb6, 0xb3, 0xc2, 0xf6,
	0x46, 0x3b, 0xe3, 0x82, 0x9b, 0x70, 0x24, 0x4a, 0x8e, 0x80, 0xe0, 0x16, 0x54, 0x8c, 0x67, 0x45,
	0x41, 0x31, 0xb2, 0xdf, 0xef, 0xcd, 0x9f, 0x67, 0xc3, 0x9c, 0x0a, 0x7c, 0xce, 0x6b, 0xd7, 0x17,
	0x6d, 0x1e, 0xaa, 0xbd, 0x0f, 0xb4, 0xda, 0x07, 0x4f, 0x5e, 0x4f, 0xe5, 0x71, 0x71, 0xdb, 0x38,
	0xda, 0x0d, 0xe5, 0xca, 0xfa, 0x6e, 0xdd, 0xf8, 0xc6, 0xaf, 0x05, 0x97, 0x43, 0x2d, 0x4a, 0x84,
	0xbc, 0xc5, 0xa9, 0xe5, 0xb7, 0x82, 0x93, 0x0d, 0x6f, 0x7c, 0x18, 0x17, 0x66, 0xb2, 0x4f, 0xcf,
	0x21, 0x95, 0x23, 0x6e, 0x6b, 0xd4, 0xb5, 0xba, 0x99, 0x64, 0xc9, 0x28, 0x1f, 0xb7, 0xfa, 0x12,
	0x00, 0xa9, 0x08, 0x94, 0x93, 0xeb, 0x2a, 0xf3, 0x5f, 0xbc, 0x43, 0x21, 0x1b, 0x06, 0xfa, 0x0a,
	0x8e, 0x38, 0x97, 0xc3, 0x5d, 0xf4, 0x0f, 0xc4, 0x87, 0x88, 0xa4, 0x61, 0x09, 0xc7, 0xae, 0x47,
	0x0a, 0x83, 0x25, 0xe7, 0x7b, 0x34, 0x13, 0xe9, 0xf8, 0xc3, 0xf4, 0x19, 0x24, 0xf6, 0xc5, 0xb6,
	0x15, 0x9a, 0x69, 0xbc, 0x1d, 0x95, 0x3e, 0x87, 0x59, 0xdb, 0x5a, 0xfe, 0xe4, 0x1a, 0x4d, 0x22,
	0x4e, 0xca, 0x3a, 0x63, 0x39, 0xc6, 0x1a, 0xad, 0xce, 0x21, 0xf2, 0x58, 0x1a, 0x63, 0x31, 0x79,
	0x12, 0xa0, 0x0d, 0xa4, 0x61, 0xe8, 0x25, 0xd2, 0x8c, 0x3d, 0x95, 0xfd, 0xca, 0xfb, 0xd3, 0xb7,
	0xcf, 0x85, 0x7a, 0xe7, 0xfa, 0xe0, 0x7a, 0xfd, 0x5a, 0xfc, 0x2b, 0x13, 0xf9, 0x2b, 0x77, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0x2d, 0x33, 0x46, 0x66, 0x01, 0x00, 0x00,
}
