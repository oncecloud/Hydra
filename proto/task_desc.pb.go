// Code generated by protoc-gen-gogo.
// source: task_desc.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TaskDescriptor_TaskState int32

const (
	TaskDescriptor_Created   TaskDescriptor_TaskState = 0
	TaskDescriptor_Blocking  TaskDescriptor_TaskState = 1
	TaskDescriptor_Runnable  TaskDescriptor_TaskState = 2
	TaskDescriptor_Assigned  TaskDescriptor_TaskState = 3
	TaskDescriptor_Running   TaskDescriptor_TaskState = 4
	TaskDescriptor_Completed TaskDescriptor_TaskState = 5
	TaskDescriptor_Failed    TaskDescriptor_TaskState = 6
	TaskDescriptor_Aborted   TaskDescriptor_TaskState = 7
	TaskDescriptor_Delegated TaskDescriptor_TaskState = 8
	TaskDescriptor_Unknown   TaskDescriptor_TaskState = 9
)

var TaskDescriptor_TaskState_name = map[int32]string{
	0: "Created",
	1: "Blocking",
	2: "Runnable",
	3: "Assigned",
	4: "Running",
	5: "Completed",
	6: "Failed",
	7: "Aborted",
	8: "Delegated",
	9: "Unknown",
}
var TaskDescriptor_TaskState_value = map[string]int32{
	"Created":   0,
	"Blocking":  1,
	"Runnable":  2,
	"Assigned":  3,
	"Running":   4,
	"Completed": 5,
	"Failed":    6,
	"Aborted":   7,
	"Delegated": 8,
	"Unknown":   9,
}

func (x TaskDescriptor_TaskState) String() string {
	return proto1.EnumName(TaskDescriptor_TaskState_name, int32(x))
}
func (TaskDescriptor_TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTaskDesc, []int{0, 0}
}

type TaskDescriptor_TaskType int32

const (
	TaskDescriptor_Sheep  TaskDescriptor_TaskType = 0
	TaskDescriptor_Rabbit TaskDescriptor_TaskType = 1
	TaskDescriptor_Devil  TaskDescriptor_TaskType = 2
	TaskDescriptor_Turtle TaskDescriptor_TaskType = 3
)

var TaskDescriptor_TaskType_name = map[int32]string{
	0: "Sheep",
	1: "Rabbit",
	2: "Devil",
	3: "Turtle",
}
var TaskDescriptor_TaskType_value = map[string]int32{
	"Sheep":  0,
	"Rabbit": 1,
	"Devil":  2,
	"Turtle": 3,
}

func (x TaskDescriptor_TaskType) String() string {
	return proto1.EnumName(TaskDescriptor_TaskType_name, int32(x))
}
func (TaskDescriptor_TaskType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorTaskDesc, []int{0, 1}
}

type TaskDescriptor struct {
	Uid   uint64                   `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name  string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State TaskDescriptor_TaskState `protobuf:"varint,3,opt,name=state,proto3,enum=proto.TaskDescriptor_TaskState" json:"state,omitempty"`
	JobID string                   `protobuf:"bytes,4,opt,name=jobID,proto3" json:"jobID,omitempty"`
	Index uint64                   `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	// Inputs/outputs
	Dependencies []*ReferenceDescriptor `protobuf:"bytes,6,rep,name=dependencies" json:"dependencies,omitempty"`
	Outputs      []*ReferenceDescriptor `protobuf:"bytes,7,rep,name=outputs" json:"outputs,omitempty"`
	// Command and arguments
	Binary []byte   `protobuf:"bytes,8,opt,name=binary,proto3" json:"binary,omitempty"`
	Args   []string `protobuf:"bytes,9,rep,name=args" json:"args,omitempty"`
	// Children
	Spawned []*TaskDescriptor `protobuf:"bytes,10,rep,name=spawned" json:"spawned,omitempty"`
	// Runtime meta-data
	ScheduledToResource   string `protobuf:"bytes,11,opt,name=scheduled_to_resource,json=scheduledToResource,proto3" json:"scheduled_to_resource,omitempty"`
	LastHeartbeatLocation string `protobuf:"bytes,12,opt,name=last_heartbeat_location,json=lastHeartbeatLocation,proto3" json:"last_heartbeat_location,omitempty"`
	LastHeartbeatTime     uint64 `protobuf:"varint,13,opt,name=last_heartbeat_time,json=lastHeartbeatTime,proto3" json:"last_heartbeat_time,omitempty"`
	// Delegation info
	DelegatedTo   string `protobuf:"bytes,14,opt,name=delegated_to,json=delegatedTo,proto3" json:"delegated_to,omitempty"`
	DelegatedFrom string `protobuf:"bytes,15,opt,name=delegated_from,json=delegatedFrom,proto3" json:"delegated_from,omitempty"`
	// Timestamps
	SubmitTime uint64 `protobuf:"varint,16,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	StartTime  uint64 `protobuf:"varint,17,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishTime uint64 `protobuf:"varint,18,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	// The total time spent unscheduled before previous runs.
	TotalUnscheduledTime uint64 `protobuf:"varint,19,opt,name=total_unscheduled_time,json=totalUnscheduledTime,proto3" json:"total_unscheduled_time,omitempty"`
	// The total time spent in previous runs. This field only gets updated when
	// the task finishes running.
	TotalRunTime uint64 `protobuf:"varint,20,opt,name=total_run_time,json=totalRunTime,proto3" json:"total_run_time,omitempty"`
	// Deadlines
	RelativeDeadline uint64 `protobuf:"varint,21,opt,name=relative_deadline,json=relativeDeadline,proto3" json:"relative_deadline,omitempty"`
	AbsoluteDeadline uint64 `protobuf:"varint,22,opt,name=absolute_deadline,json=absoluteDeadline,proto3" json:"absolute_deadline,omitempty"`
	// Application-specific fields
	// TODO(malte): move these to sub-messages
	Port      uint64 `protobuf:"varint,23,opt,name=port,proto3" json:"port,omitempty"`
	InputSize uint64 `protobuf:"varint,24,opt,name=input_size,json=inputSize,proto3" json:"input_size,omitempty"`
	// TaskLib related stuff
	InjectTaskLib bool `protobuf:"varint,25,opt,name=inject_task_lib,json=injectTaskLib,proto3" json:"inject_task_lib,omitempty"`
	// Task resource request and priority
	ResourceRequest *ResourceVector         `protobuf:"bytes,26,opt,name=resource_request,json=resourceRequest" json:"resource_request,omitempty"`
	Priority        uint32                  `protobuf:"varint,27,opt,name=priority,proto3" json:"priority,omitempty"`
	TaskType        TaskDescriptor_TaskType `protobuf:"varint,28,opt,name=task_type,json=taskType,proto3,enum=proto.TaskDescriptor_TaskType" json:"task_type,omitempty"`
	// Final report after successful execution
	FinalReport *TaskFinalReport `protobuf:"bytes,29,opt,name=final_report,json=finalReport" json:"final_report,omitempty"`
	// Simulation related fields
	TraceJobId  uint64 `protobuf:"varint,30,opt,name=trace_job_id,json=traceJobId,proto3" json:"trace_job_id,omitempty"`
	TraceTaskId uint64 `protobuf:"varint,31,opt,name=trace_task_id,json=traceTaskId,proto3" json:"trace_task_id,omitempty"`
}

func (m *TaskDescriptor) Reset()                    { *m = TaskDescriptor{} }
func (m *TaskDescriptor) String() string            { return proto1.CompactTextString(m) }
func (*TaskDescriptor) ProtoMessage()               {}
func (*TaskDescriptor) Descriptor() ([]byte, []int) { return fileDescriptorTaskDesc, []int{0} }

func (m *TaskDescriptor) GetDependencies() []*ReferenceDescriptor {
	if m != nil {
		return m.Dependencies
	}
	return nil
}

func (m *TaskDescriptor) GetOutputs() []*ReferenceDescriptor {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *TaskDescriptor) GetSpawned() []*TaskDescriptor {
	if m != nil {
		return m.Spawned
	}
	return nil
}

func (m *TaskDescriptor) GetResourceRequest() *ResourceVector {
	if m != nil {
		return m.ResourceRequest
	}
	return nil
}

func (m *TaskDescriptor) GetFinalReport() *TaskFinalReport {
	if m != nil {
		return m.FinalReport
	}
	return nil
}

func init() {
	proto1.RegisterType((*TaskDescriptor)(nil), "proto.TaskDescriptor")
	proto1.RegisterEnum("proto.TaskDescriptor_TaskState", TaskDescriptor_TaskState_name, TaskDescriptor_TaskState_value)
	proto1.RegisterEnum("proto.TaskDescriptor_TaskType", TaskDescriptor_TaskType_name, TaskDescriptor_TaskType_value)
}
func (m *TaskDescriptor) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *TaskDescriptor) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.Uid))
	}
	if len(m.Name) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintTaskDesc(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if m.State != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.State))
	}
	if len(m.JobID) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintTaskDesc(data, i, uint64(len(m.JobID)))
		i += copy(data[i:], m.JobID)
	}
	if m.Index != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.Index))
	}
	if len(m.Dependencies) > 0 {
		for _, msg := range m.Dependencies {
			data[i] = 0x32
			i++
			i = encodeVarintTaskDesc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Outputs) > 0 {
		for _, msg := range m.Outputs {
			data[i] = 0x3a
			i++
			i = encodeVarintTaskDesc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Binary) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintTaskDesc(data, i, uint64(len(m.Binary)))
		i += copy(data[i:], m.Binary)
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			data[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Spawned) > 0 {
		for _, msg := range m.Spawned {
			data[i] = 0x52
			i++
			i = encodeVarintTaskDesc(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ScheduledToResource) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintTaskDesc(data, i, uint64(len(m.ScheduledToResource)))
		i += copy(data[i:], m.ScheduledToResource)
	}
	if len(m.LastHeartbeatLocation) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintTaskDesc(data, i, uint64(len(m.LastHeartbeatLocation)))
		i += copy(data[i:], m.LastHeartbeatLocation)
	}
	if m.LastHeartbeatTime != 0 {
		data[i] = 0x68
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.LastHeartbeatTime))
	}
	if len(m.DelegatedTo) > 0 {
		data[i] = 0x72
		i++
		i = encodeVarintTaskDesc(data, i, uint64(len(m.DelegatedTo)))
		i += copy(data[i:], m.DelegatedTo)
	}
	if len(m.DelegatedFrom) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintTaskDesc(data, i, uint64(len(m.DelegatedFrom)))
		i += copy(data[i:], m.DelegatedFrom)
	}
	if m.SubmitTime != 0 {
		data[i] = 0x80
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.SubmitTime))
	}
	if m.StartTime != 0 {
		data[i] = 0x88
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		data[i] = 0x90
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.FinishTime))
	}
	if m.TotalUnscheduledTime != 0 {
		data[i] = 0x98
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.TotalUnscheduledTime))
	}
	if m.TotalRunTime != 0 {
		data[i] = 0xa0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.TotalRunTime))
	}
	if m.RelativeDeadline != 0 {
		data[i] = 0xa8
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.RelativeDeadline))
	}
	if m.AbsoluteDeadline != 0 {
		data[i] = 0xb0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.AbsoluteDeadline))
	}
	if m.Port != 0 {
		data[i] = 0xb8
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.Port))
	}
	if m.InputSize != 0 {
		data[i] = 0xc0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.InputSize))
	}
	if m.InjectTaskLib {
		data[i] = 0xc8
		i++
		data[i] = 0x1
		i++
		if m.InjectTaskLib {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.ResourceRequest != nil {
		data[i] = 0xd2
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.ResourceRequest.Size()))
		n1, err := m.ResourceRequest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Priority != 0 {
		data[i] = 0xd8
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.Priority))
	}
	if m.TaskType != 0 {
		data[i] = 0xe0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.TaskType))
	}
	if m.FinalReport != nil {
		data[i] = 0xea
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.FinalReport.Size()))
		n2, err := m.FinalReport.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.TraceJobId != 0 {
		data[i] = 0xf0
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.TraceJobId))
	}
	if m.TraceTaskId != 0 {
		data[i] = 0xf8
		i++
		data[i] = 0x1
		i++
		i = encodeVarintTaskDesc(data, i, uint64(m.TraceTaskId))
	}
	return i, nil
}

func encodeFixed64TaskDesc(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32TaskDesc(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintTaskDesc(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *TaskDescriptor) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovTaskDesc(uint64(m.Uid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTaskDesc(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovTaskDesc(uint64(m.State))
	}
	l = len(m.JobID)
	if l > 0 {
		n += 1 + l + sovTaskDesc(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovTaskDesc(uint64(m.Index))
	}
	if len(m.Dependencies) > 0 {
		for _, e := range m.Dependencies {
			l = e.Size()
			n += 1 + l + sovTaskDesc(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovTaskDesc(uint64(l))
		}
	}
	l = len(m.Binary)
	if l > 0 {
		n += 1 + l + sovTaskDesc(uint64(l))
	}
	if len(m.Args) > 0 {
		for _, s := range m.Args {
			l = len(s)
			n += 1 + l + sovTaskDesc(uint64(l))
		}
	}
	if len(m.Spawned) > 0 {
		for _, e := range m.Spawned {
			l = e.Size()
			n += 1 + l + sovTaskDesc(uint64(l))
		}
	}
	l = len(m.ScheduledToResource)
	if l > 0 {
		n += 1 + l + sovTaskDesc(uint64(l))
	}
	l = len(m.LastHeartbeatLocation)
	if l > 0 {
		n += 1 + l + sovTaskDesc(uint64(l))
	}
	if m.LastHeartbeatTime != 0 {
		n += 1 + sovTaskDesc(uint64(m.LastHeartbeatTime))
	}
	l = len(m.DelegatedTo)
	if l > 0 {
		n += 1 + l + sovTaskDesc(uint64(l))
	}
	l = len(m.DelegatedFrom)
	if l > 0 {
		n += 1 + l + sovTaskDesc(uint64(l))
	}
	if m.SubmitTime != 0 {
		n += 2 + sovTaskDesc(uint64(m.SubmitTime))
	}
	if m.StartTime != 0 {
		n += 2 + sovTaskDesc(uint64(m.StartTime))
	}
	if m.FinishTime != 0 {
		n += 2 + sovTaskDesc(uint64(m.FinishTime))
	}
	if m.TotalUnscheduledTime != 0 {
		n += 2 + sovTaskDesc(uint64(m.TotalUnscheduledTime))
	}
	if m.TotalRunTime != 0 {
		n += 2 + sovTaskDesc(uint64(m.TotalRunTime))
	}
	if m.RelativeDeadline != 0 {
		n += 2 + sovTaskDesc(uint64(m.RelativeDeadline))
	}
	if m.AbsoluteDeadline != 0 {
		n += 2 + sovTaskDesc(uint64(m.AbsoluteDeadline))
	}
	if m.Port != 0 {
		n += 2 + sovTaskDesc(uint64(m.Port))
	}
	if m.InputSize != 0 {
		n += 2 + sovTaskDesc(uint64(m.InputSize))
	}
	if m.InjectTaskLib {
		n += 3
	}
	if m.ResourceRequest != nil {
		l = m.ResourceRequest.Size()
		n += 2 + l + sovTaskDesc(uint64(l))
	}
	if m.Priority != 0 {
		n += 2 + sovTaskDesc(uint64(m.Priority))
	}
	if m.TaskType != 0 {
		n += 2 + sovTaskDesc(uint64(m.TaskType))
	}
	if m.FinalReport != nil {
		l = m.FinalReport.Size()
		n += 2 + l + sovTaskDesc(uint64(l))
	}
	if m.TraceJobId != 0 {
		n += 2 + sovTaskDesc(uint64(m.TraceJobId))
	}
	if m.TraceTaskId != 0 {
		n += 2 + sovTaskDesc(uint64(m.TraceTaskId))
	}
	return n
}

func sovTaskDesc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTaskDesc(x uint64) (n int) {
	return sovTaskDesc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskDescriptor) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTaskDesc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Uid |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.State |= (TaskDescriptor_TaskState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobID = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dependencies = append(m.Dependencies, &ReferenceDescriptor{})
			if err := m.Dependencies[len(m.Dependencies)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &ReferenceDescriptor{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Binary", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Binary = append(m.Binary[:0], data[iNdEx:postIndex]...)
			if m.Binary == nil {
				m.Binary = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = append(m.Args, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spawned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spawned = append(m.Spawned, &TaskDescriptor{})
			if err := m.Spawned[len(m.Spawned)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledToResource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledToResource = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastHeartbeatLocation = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeartbeatTime", wireType)
			}
			m.LastHeartbeatTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastHeartbeatTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatedTo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatedFrom = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			m.SubmitTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.SubmitTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.StartTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FinishTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUnscheduledTime", wireType)
			}
			m.TotalUnscheduledTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TotalUnscheduledTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRunTime", wireType)
			}
			m.TotalRunTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TotalRunTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelativeDeadline", wireType)
			}
			m.RelativeDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RelativeDeadline |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsoluteDeadline", wireType)
			}
			m.AbsoluteDeadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AbsoluteDeadline |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Port |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputSize", wireType)
			}
			m.InputSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.InputSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InjectTaskLib", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InjectTaskLib = bool(v != 0)
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourceRequest == nil {
				m.ResourceRequest = &ResourceVector{}
			}
			if err := m.ResourceRequest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Priority |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskType", wireType)
			}
			m.TaskType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TaskType |= (TaskDescriptor_TaskType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalReport", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTaskDesc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FinalReport == nil {
				m.FinalReport = &TaskFinalReport{}
			}
			if err := m.FinalReport.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceJobId", wireType)
			}
			m.TraceJobId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TraceJobId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceTaskId", wireType)
			}
			m.TraceTaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.TraceTaskId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTaskDesc(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTaskDesc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTaskDesc(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTaskDesc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTaskDesc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTaskDesc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTaskDesc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTaskDesc(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTaskDesc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTaskDesc   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorTaskDesc = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xdb, 0x6e, 0x23, 0x45,
	0x10, 0x5d, 0xaf, 0xe3, 0x5b, 0xf9, 0x92, 0x49, 0x27, 0x4e, 0x1a, 0xc3, 0x26, 0x21, 0x02, 0xb4,
	0x12, 0x22, 0x91, 0xc2, 0x82, 0x40, 0x48, 0x88, 0xdd, 0xb5, 0x22, 0x16, 0xed, 0xd3, 0xc4, 0xcb,
	0xab, 0x35, 0xe3, 0x69, 0xdb, 0xbd, 0x19, 0x77, 0x0f, 0x3d, 0x3d, 0x09, 0xe1, 0x37, 0x78, 0xe1,
	0x33, 0xf8, 0x0c, 0x1e, 0xf9, 0x04, 0x04, 0x3f, 0x42, 0x75, 0xf5, 0x8c, 0xed, 0x20, 0x10, 0x0f,
	0x96, 0xbb, 0xce, 0x39, 0x75, 0x99, 0xea, 0xaa, 0x86, 0x5d, 0x1b, 0xe5, 0x37, 0xd3, 0x44, 0xe4,
	0xb3, 0xf3, 0xcc, 0x68, 0xab, 0x59, 0x83, 0xfe, 0x46, 0x9f, 0x2c, 0xa4, 0x5d, 0x16, 0xf1, 0xf9,
	0x4c, 0xaf, 0x2e, 0x16, 0x7a, 0xa1, 0x2f, 0x08, 0x8e, 0x8b, 0x39, 0x59, 0x64, 0xd0, 0xc9, 0x7b,
	0x8d, 0x0e, 0x8c, 0x98, 0x0b, 0x23, 0xd4, 0x4c, 0x6c, 0xc5, 0x1a, 0x0d, 0x8d, 0xc8, 0x75, 0x61,
	0x10, 0xbc, 0x15, 0x33, 0xab, 0x4d, 0x09, 0x1f, 0x51, 0xce, 0xb9, 0x54, 0x51, 0x3a, 0x35, 0x22,
	0xd3, 0xc6, 0x7a, 0xe2, 0xec, 0xd7, 0x2e, 0x0c, 0x26, 0xc8, 0x8d, 0x31, 0x84, 0x91, 0x19, 0x7a,
	0xb0, 0x00, 0xea, 0x85, 0x4c, 0x78, 0xed, 0xb4, 0xf6, 0x74, 0x27, 0x74, 0x47, 0xc6, 0x60, 0x47,
	0x45, 0x2b, 0xc1, 0x1f, 0x23, 0xd4, 0x09, 0xe9, 0xcc, 0x3e, 0x83, 0x46, 0x6e, 0x23, 0x2b, 0x78,
	0x1d, 0xc1, 0xc1, 0xe5, 0x89, 0x8f, 0x77, 0xfe, 0x30, 0x16, 0x99, 0xd7, 0x4e, 0x16, 0x7a, 0x35,
	0x3b, 0x80, 0xc6, 0x5b, 0x1d, 0xbf, 0x1a, 0xf3, 0x1d, 0x8a, 0xe5, 0x0d, 0x87, 0x4a, 0x95, 0x88,
	0x1f, 0x79, 0x83, 0x92, 0x7a, 0x83, 0x7d, 0x0d, 0xbd, 0x44, 0x64, 0x02, 0xcf, 0x6a, 0x26, 0x45,
	0xce, 0x9b, 0xa7, 0xf5, 0xa7, 0xdd, 0xcb, 0x51, 0x99, 0x29, 0xac, 0x3e, 0x7f, 0x93, 0x2e, 0x7c,
	0xa0, 0x67, 0xcf, 0xa0, 0xa5, 0x0b, 0x9b, 0x15, 0x36, 0xe7, 0xad, 0xff, 0x75, 0xad, 0xa4, 0xec,
	0x10, 0x9a, 0x31, 0xf6, 0xc9, 0xdc, 0xf3, 0x36, 0x16, 0xd3, 0x0b, 0x4b, 0xcb, 0x35, 0x21, 0x32,
	0x8b, 0x9c, 0x77, 0x30, 0x14, 0x36, 0xc1, 0x9d, 0xd9, 0x05, 0xb4, 0xf2, 0x2c, 0xba, 0x53, 0x22,
	0xe1, 0x40, 0x19, 0x86, 0xff, 0xda, 0x86, 0xb0, 0x52, 0xb1, 0x4b, 0x18, 0xe6, 0xb3, 0xa5, 0x48,
	0x8a, 0x54, 0x24, 0x53, 0xab, 0xa7, 0xd5, 0x6d, 0xf1, 0x2e, 0xb5, 0x63, 0x7f, 0x4d, 0x4e, 0x74,
	0x58, 0x52, 0xec, 0x73, 0x38, 0x4a, 0xa3, 0xdc, 0x4e, 0x97, 0x22, 0x32, 0x36, 0x16, 0x91, 0x9d,
	0xa6, 0x7a, 0x16, 0x59, 0xa9, 0x15, 0xef, 0x91, 0xd7, 0xd0, 0xd1, 0xdf, 0x56, 0xec, 0xeb, 0x92,
	0x64, 0xe7, 0xb0, 0xff, 0x0f, 0x3f, 0x2b, 0xf1, 0x12, 0xfb, 0xd4, 0xe2, 0xbd, 0x07, 0x3e, 0x13,
	0x24, 0xd8, 0xfb, 0xae, 0xdd, 0xa9, 0x58, 0xe0, 0x35, 0xb9, 0xda, 0xf8, 0x80, 0x82, 0x77, 0xd7,
	0xd8, 0x44, 0xb3, 0x0f, 0x61, 0xb0, 0x91, 0xcc, 0x8d, 0x5e, 0xf1, 0x5d, 0x12, 0xf5, 0xd7, 0xe8,
	0x15, 0x82, 0xec, 0x04, 0xba, 0x79, 0x11, 0xaf, 0x64, 0x99, 0x31, 0xa0, 0x8c, 0xe0, 0x21, 0x4a,
	0xf5, 0x04, 0x00, 0xc7, 0xc1, 0x94, 0xfc, 0x1e, 0xf1, 0x1d, 0x42, 0x88, 0x46, 0x7f, 0x1c, 0x55,
	0x99, 0x2f, 0x3d, 0xcf, 0xbc, 0xbf, 0x87, 0x48, 0xf0, 0x0c, 0x0e, 0xad, 0xb6, 0x38, 0xcb, 0x85,
	0xda, 0x6a, 0xa7, 0xd3, 0xee, 0x93, 0xf6, 0x80, 0xd8, 0x37, 0x1b, 0x92, 0xbc, 0x3e, 0x80, 0x81,
	0xf7, 0x32, 0x85, 0xf2, 0xea, 0x03, 0x52, 0xf7, 0x08, 0x0d, 0x0b, 0x45, 0xaa, 0x8f, 0x61, 0xcf,
	0x88, 0x14, 0x5b, 0x78, 0xeb, 0x16, 0x2b, 0x4a, 0x52, 0xa9, 0x04, 0x1f, 0x92, 0x30, 0xa8, 0x88,
	0x71, 0x89, 0x3b, 0x71, 0x14, 0xe7, 0x3a, 0x2d, 0xec, 0x96, 0xf8, 0xd0, 0x8b, 0x2b, 0x62, 0x2d,
	0xc6, 0x09, 0x72, 0x9b, 0xc7, 0x8f, 0x88, 0xa7, 0xb3, 0xeb, 0x84, 0x54, 0x38, 0x77, 0xd3, 0x5c,
	0xfe, 0x24, 0x38, 0xf7, 0x9d, 0x20, 0xe4, 0x1a, 0x01, 0xf6, 0x11, 0xec, 0x4a, 0xf5, 0x16, 0x37,
	0x79, 0x4a, 0x0b, 0x9c, 0xca, 0x98, 0xbf, 0x83, 0x9a, 0x76, 0xd8, 0xf7, 0xb0, 0x9b, 0xb3, 0xd7,
	0x32, 0x66, 0xdf, 0x40, 0xb0, 0x5e, 0x7c, 0x23, 0x7e, 0x28, 0x44, 0x6e, 0xf9, 0x08, 0x85, 0x9b,
	0x89, 0xac, 0xc6, 0xe9, 0x7b, 0x7a, 0x16, 0xc2, 0xdd, 0x4a, 0x1e, 0x7a, 0x35, 0x1b, 0x41, 0x3b,
	0x33, 0x52, 0x1b, 0x69, 0xef, 0xf9, 0xbb, 0xe8, 0xd9, 0x0f, 0xd7, 0x36, 0xfb, 0x0a, 0x3a, 0x94,
	0xde, 0xde, 0x67, 0x82, 0xbf, 0x47, 0xfb, 0x7e, 0xfc, 0xdf, 0xfb, 0x3e, 0x41, 0x55, 0xd8, 0xb6,
	0xe5, 0x89, 0x7d, 0x09, 0xbd, 0xed, 0x77, 0x87, 0x3f, 0xa1, 0xb2, 0x0e, 0xb7, 0xfc, 0xaf, 0x1c,
	0x1d, 0x12, 0x1b, 0x76, 0xe7, 0x1b, 0x83, 0x9d, 0x42, 0xcf, 0x9a, 0x08, 0x3f, 0x09, 0x5f, 0x89,
	0x29, 0x3e, 0x49, 0xc7, 0x7e, 0x10, 0x08, 0xfb, 0x0e, 0x1f, 0x8e, 0x84, 0x9d, 0x41, 0xdf, 0x2b,
	0xa8, 0x3e, 0x94, 0x9c, 0x90, 0xa4, 0x4b, 0xa0, 0x8b, 0xfd, 0x2a, 0x39, 0xfb, 0xb9, 0x06, 0x9d,
	0xf5, 0x3b, 0xc4, 0xba, 0xd0, 0x7a, 0x69, 0x84, 0x1b, 0xd5, 0xe0, 0x11, 0xeb, 0x41, 0xfb, 0x05,
	0x2e, 0xd3, 0x8d, 0x54, 0x8b, 0xa0, 0xe6, 0x2c, 0x1c, 0x02, 0x15, 0xc5, 0xa9, 0x08, 0x1e, 0x3b,
	0xeb, 0x79, 0x9e, 0xcb, 0x05, 0xae, 0x6d, 0x50, 0x77, 0x6e, 0x8e, 0x73, 0xc2, 0x1d, 0xd6, 0x87,
	0xce, 0x4b, 0xbd, 0xca, 0x52, 0xe1, 0xa2, 0x34, 0x18, 0x40, 0xf3, 0x2a, 0x92, 0x38, 0x65, 0x41,
	0xd3, 0xe9, 0x9e, 0xc7, 0x58, 0x3b, 0x1a, 0x2d, 0xa7, 0x1b, 0x57, 0x8b, 0x11, 0xb4, 0x1d, 0xf7,
	0x46, 0xdd, 0x28, 0x7d, 0xa7, 0x82, 0xce, 0xd9, 0x17, 0xd0, 0xae, 0x9a, 0xc5, 0x3a, 0xd0, 0xb8,
	0x5e, 0x0a, 0x91, 0x61, 0x45, 0x18, 0x2b, 0x8c, 0xe2, 0x58, 0x5a, 0xac, 0x07, 0xe1, 0xb1, 0xb8,
	0x95, 0x29, 0x16, 0x83, 0xf0, 0xa4, 0x30, 0x16, 0x0b, 0xab, 0xbf, 0x08, 0x7e, 0xfb, 0xf3, 0xb8,
	0xf6, 0x3b, 0xfe, 0xfe, 0xc0, 0xdf, 0x2f, 0x7f, 0x1d, 0x3f, 0x8a, 0x9b, 0xd4, 0xcb, 0x4f, 0xff,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xbb, 0x16, 0x5f, 0x5a, 0x06, 0x00, 0x00,
}
