// Code generated by protoc-gen-gogo.
// source: whare_map_stats.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WhareMapStats struct {
	NumIdle    uint64 `protobuf:"varint,1,opt,name=num_idle,json=numIdle,proto3" json:"num_idle,omitempty"`
	NumDevils  uint64 `protobuf:"varint,2,opt,name=num_devils,json=numDevils,proto3" json:"num_devils,omitempty"`
	NumRabbits uint64 `protobuf:"varint,3,opt,name=num_rabbits,json=numRabbits,proto3" json:"num_rabbits,omitempty"`
	NumSheep   uint64 `protobuf:"varint,4,opt,name=num_sheep,json=numSheep,proto3" json:"num_sheep,omitempty"`
	NumTurtles uint64 `protobuf:"varint,5,opt,name=num_turtles,json=numTurtles,proto3" json:"num_turtles,omitempty"`
}

func (m *WhareMapStats) Reset()                    { *m = WhareMapStats{} }
func (m *WhareMapStats) String() string            { return proto1.CompactTextString(m) }
func (*WhareMapStats) ProtoMessage()               {}
func (*WhareMapStats) Descriptor() ([]byte, []int) { return fileDescriptorWhareMapStats, []int{0} }

func init() {
	proto1.RegisterType((*WhareMapStats)(nil), "proto.WhareMapStats")
}
func (m *WhareMapStats) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *WhareMapStats) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumIdle != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintWhareMapStats(data, i, uint64(m.NumIdle))
	}
	if m.NumDevils != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintWhareMapStats(data, i, uint64(m.NumDevils))
	}
	if m.NumRabbits != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintWhareMapStats(data, i, uint64(m.NumRabbits))
	}
	if m.NumSheep != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintWhareMapStats(data, i, uint64(m.NumSheep))
	}
	if m.NumTurtles != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintWhareMapStats(data, i, uint64(m.NumTurtles))
	}
	return i, nil
}

func encodeFixed64WhareMapStats(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32WhareMapStats(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintWhareMapStats(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *WhareMapStats) Size() (n int) {
	var l int
	_ = l
	if m.NumIdle != 0 {
		n += 1 + sovWhareMapStats(uint64(m.NumIdle))
	}
	if m.NumDevils != 0 {
		n += 1 + sovWhareMapStats(uint64(m.NumDevils))
	}
	if m.NumRabbits != 0 {
		n += 1 + sovWhareMapStats(uint64(m.NumRabbits))
	}
	if m.NumSheep != 0 {
		n += 1 + sovWhareMapStats(uint64(m.NumSheep))
	}
	if m.NumTurtles != 0 {
		n += 1 + sovWhareMapStats(uint64(m.NumTurtles))
	}
	return n
}

func sovWhareMapStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozWhareMapStats(x uint64) (n int) {
	return sovWhareMapStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhareMapStats) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhareMapStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhareMapStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhareMapStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumIdle", wireType)
			}
			m.NumIdle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhareMapStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumIdle |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumDevils", wireType)
			}
			m.NumDevils = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhareMapStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumDevils |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRabbits", wireType)
			}
			m.NumRabbits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhareMapStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumRabbits |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSheep", wireType)
			}
			m.NumSheep = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhareMapStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumSheep |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumTurtles", wireType)
			}
			m.NumTurtles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhareMapStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.NumTurtles |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWhareMapStats(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWhareMapStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhareMapStats(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhareMapStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhareMapStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhareMapStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthWhareMapStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWhareMapStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWhareMapStats(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWhareMapStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhareMapStats   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorWhareMapStats = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xcf, 0x48, 0x2c,
	0x4a, 0x8d, 0xcf, 0x4d, 0x2c, 0x88, 0x2f, 0x2e, 0x49, 0x2c, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0xe1, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0xcc, 0x01,
	0xb3, 0x20, 0xba, 0x94, 0x56, 0x30, 0x72, 0xf1, 0x86, 0x83, 0xcc, 0xf3, 0x4d, 0x2c, 0x08, 0x06,
	0x99, 0x26, 0x24, 0xc9, 0xc5, 0x91, 0x57, 0x9a, 0x1b, 0x9f, 0x99, 0x92, 0x93, 0x2a, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0x12, 0xc4, 0x0e, 0xe4, 0x7b, 0x02, 0xb9, 0x42, 0xb2, 0x5c, 0x5c, 0x20, 0xa9,
	0x94, 0xd4, 0xb2, 0xcc, 0x9c, 0x62, 0x09, 0x26, 0xb0, 0x24, 0x27, 0x50, 0xc4, 0x05, 0x2c, 0x20,
	0x24, 0xcf, 0xc5, 0x0d, 0x92, 0x2e, 0x4a, 0x4c, 0x4a, 0xca, 0x2c, 0x29, 0x96, 0x60, 0x06, 0xcb,
	0x83, 0x74, 0x04, 0x41, 0x44, 0x84, 0xa4, 0xb9, 0x40, 0xaa, 0xe3, 0x8b, 0x33, 0x52, 0x53, 0x0b,
	0x24, 0x58, 0xc0, 0xd2, 0x20, 0xbb, 0x82, 0x41, 0x7c, 0x98, 0xee, 0x92, 0xd2, 0xa2, 0x92, 0x9c,
	0xd4, 0x62, 0x09, 0x56, 0xb8, 0xee, 0x10, 0x88, 0x88, 0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x80, 0xf8, 0x01, 0x10, 0xcf, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0xf6, 0x83, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x41, 0x40, 0xc2, 0xba, 0x12, 0x01, 0x00, 0x00,
}
